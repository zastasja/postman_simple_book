{
	"info": {
		"_postman_id": "153a30e4-be3b-446c-9ad2-ba1b9dd4c11b",
		"name": "Simple book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response['status']);\r",
							"\r",
							"pm.test(\"Status should be OK\", () => {\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"Register API Client\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/status",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"listOfBooks\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": {{$randomFullName}},\r\n   \"clientEmail\": {{$randomExampleEmail}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api-clients",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "listOfBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonFiction = response.filter((book) => book.available === true);\r",
							"\r",
							"const book = nonFiction[0];\r",
							"\r",
							"if (book){\r",
							"    pm.globals.set(\"bookId\", book.id);\r",
							"}\r",
							"\r",
							"pm.test(\"Book found\", () => {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"})\r",
							"pm.globals.set(\"bookId\", nonFiction[0].id);\r",
							"\r",
							"postman.setNextRequest(\"orderBook\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books?type=fiction",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						},
						{
							"key": "limit",
							"value": "20",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "orderBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"const response = pm.response.json();\r",
							"pm.globals.set(\"orderId\", response.orderId);\r",
							"\r",
							"postman.setNextRequest(\"single order id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\" : {{bookId}},\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "single order id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"single book id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "single book id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Is in Stock\", () => {\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"get all orders\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/:bookId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,300]);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"update order\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "update order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,204]);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(\"delete order\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,203,204, 300]);\r",
							"})\r",
							"\r",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "907d370c0b80b0c71795f155d8a0ecdad9f4d7c96f6279d8afab52b318673dba",
			"type": "string"
		},
		{
			"key": "bookId",
			"value": ""
		}
	]
}